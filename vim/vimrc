set nocompatible

if filereadable(expand("~/.vim/autoload/plug.vim"))
  call plug#begin("~/.vim/plugged")

  Plug 'scrooloose/nerdtree'
  Plug 'scrooloose/nerdcommenter'
  Plug 'fidian/hexmode'
  Plug 'airblade/vim-gitgutter'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-dispatch'

  " Syntax plugins
  Plug 'tpope/vim-cucumber'
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'
  " vim-go requires go to be installed (shock)
  Plug 'fatih/vim-go', { 'tag': '*', 'do': ':GoInstallBinaries' }
  Plug 'derekwyatt/vim-scala'

  " Completion
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --java-completer' }

  " Linting
  Plug 'vim-syntastic/syntastic'

  Plug 'fenetikm/falcon'

  call plug#end()

  """""""""""""""""""""""""
  ""                     ""
  ""    PLUGIN CONFIG    ""
  ""                     ""
  """""""""""""""""""""""""

  " Colours
  set termguicolors
  colorscheme falcon

  " vim-go
  autocmd FileType go map <C-.> :cnext<CR>
  autocmd FileType go map <C-,> :cprevious<CR>
  autocmd FileType go nnoremap <leader>q :cclose<CR>
  autocmd FileType go nmap <leader>b <Plug>(go-build)
  autocmd FileType go nmap <leader>r <Plug>(go-run)
  autocmd FileType go nmap <leader>t <Plug>(go-test)
  autocmd FileType go nmap <leader>c <Plug>(go-coverage-toggle)
  let g:go_fmt_command = "goimports"
endif

syntax enable

" Default indenting to 2 spaces
set expandtab
set smarttab
set tabstop=2
set shiftwidth=2
set softtabstop=2
filetype plugin on
filetype plugin indent on
set autoindent
set smarttab


" Show line numbers
set number
" Show line numbers relative to current line
set relativenumber
" Show line and column in status bar
set ruler
" Show current command on status bar
set showcmd
" Show current vim mode
set showmode
" Highlight the matching parenthesis
set showmatch
" Show completion options in the menu
set wildmenu
" Ignores case when searching is search string is lowercase
set ignorecase
set smartcase
" Sets a more descriptive title in the terminal
set title
" g flag is on by default when performing :s
set gdefault
" Do not close buffers when opening new
set hidden
" Enable mouse in terminals
set mouse=a
" Do the correct thing when pressing backspace
set backspace=indent,eol,start
" Understand :W as :w
command! W :w
" Show unwanted whitespace
set listchars=tab:->,trail:Â·,extends:>
set list!
" Always show statusline
set laststatus=2
" in a gui, use a nice font
set guifont=mononoki\ 10

" move up/down respecting wrapping
nnoremap j gj
nnoremap k gk

" leave insert mode on jj
inoremap jj <ESC>

" switch between open buffers
map <F7> :bp <CR>
map <F8> :bn <CR>

nnoremap <Leader>h :set hlsearch!<CR>
nnoremap <Leader>d :execute 'NERDTree ' . getcwd()<CR>
nnoremap <Leader>D :NERDTreeClose<CR>

" display colours correctly, even in tmux
if &term =~# '^screen'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Colourscheme helper function
" TODO improve comment backgrounds in falcon
function! SyntaxItem()
  return synIDattr(synID(line("."),col("."), 1), "name")
endfunction

function! BuildStatusLine()
  " TODO build a better status line
  set statusline=%f           " filename
  set statusline+=\ -\        " separator
  set statusline+=Filetype:\  " label
  set statusline+=%y          " filetype
endfunction
call BuildStatusLine()
